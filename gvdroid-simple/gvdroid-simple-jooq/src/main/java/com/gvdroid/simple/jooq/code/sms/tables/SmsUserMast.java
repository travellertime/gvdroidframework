/*
 * This file is generated by jOOQ.
 */
package com.gvdroid.simple.jooq.code.sms.tables;


import com.gvdroid.simple.jooq.code.sms.Keys;
import com.gvdroid.simple.jooq.code.sms.Sms;
import com.gvdroid.simple.jooq.code.sms.tables.records.SmsUserMastRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 权限-用户主表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmsUserMast extends TableImpl<SmsUserMastRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sms.sms_user_mast</code>
     */
    public static final SmsUserMast SMS_USER_MAST = new SmsUserMast();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmsUserMastRecord> getRecordType() {
        return SmsUserMastRecord.class;
    }

    /**
     * The column <code>sms.sms_user_mast.id</code>. 主键（用户编号）
     */
    public final TableField<SmsUserMastRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键（用户编号）");

    /**
     * The column <code>sms.sms_user_mast.name</code>. 用户名称
     */
    public final TableField<SmsUserMastRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "用户名称");

    /**
     * The column <code>sms.sms_user_mast.category</code>. 用户分类 1 user, 2 customer
     */
    public final TableField<SmsUserMastRecord, Integer> CATEGORY = createField(DSL.name("category"), SQLDataType.INTEGER.nullable(false), this, "用户分类 1 user, 2 customer");

    /**
     * The column <code>sms.sms_user_mast.customerId</code>. 用户客户编号
     */
    public final TableField<SmsUserMastRecord, String> CUSTOMERID = createField(DSL.name("customerId"), SQLDataType.VARCHAR(32).nullable(false), this, "用户客户编号");

    /**
     * The column <code>sms.sms_user_mast.accountNo</code>. 商户虚拟账号
     */
    public final TableField<SmsUserMastRecord, String> ACCOUNTNO = createField(DSL.name("accountNo"), SQLDataType.VARCHAR(32).nullable(false), this, "商户虚拟账号");

    /**
     * The column <code>sms.sms_user_mast.mobile</code>. 用户手机号码
     */
    public final TableField<SmsUserMastRecord, String> MOBILE = createField(DSL.name("mobile"), SQLDataType.VARCHAR(32).nullable(false), this, "用户手机号码");

    /**
     * The column <code>sms.sms_user_mast.source</code>. 用户来源 added, invited, machine
     */
    public final TableField<SmsUserMastRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(8).nullable(false), this, "用户来源 added, invited, machine");

    /**
     * The column <code>sms.sms_user_mast.pinCode</code>. 验证码
     */
    public final TableField<SmsUserMastRecord, String> PINCODE = createField(DSL.name("pinCode"), SQLDataType.VARCHAR(8), this, "验证码");

    /**
     * The column <code>sms.sms_user_mast.pinCodeDate</code>. 验证码时间
     */
    public final TableField<SmsUserMastRecord, LocalDateTime> PINCODEDATE = createField(DSL.name("pinCodeDate"), SQLDataType.LOCALDATETIME(0), this, "验证码时间");

    /**
     * The column <code>sms.sms_user_mast.status</code>. 状态 1 normal
     */
    public final TableField<SmsUserMastRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "状态 1 normal");

    /**
     * The column <code>sms.sms_user_mast.deleted</code>. 删除状态 0 正常 1 逻辑删除
     */
    public final TableField<SmsUserMastRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "删除状态 0 正常 1 逻辑删除");

    /**
     * The column <code>sms.sms_user_mast.createDate</code>. 创建时间
     */
    public final TableField<SmsUserMastRecord, LocalDateTime> CREATEDATE = createField(DSL.name("createDate"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>sms.sms_user_mast.createUser</code>. 创建人员
     */
    public final TableField<SmsUserMastRecord, String> CREATEUSER = createField(DSL.name("createUser"), SQLDataType.VARCHAR(32).nullable(false), this, "创建人员");

    /**
     * The column <code>sms.sms_user_mast.createOrg</code>. 创建机构
     */
    public final TableField<SmsUserMastRecord, String> CREATEORG = createField(DSL.name("createOrg"), SQLDataType.VARCHAR(32).nullable(false), this, "创建机构");

    /**
     * The column <code>sms.sms_user_mast.updateDate</code>. 维护时间
     */
    public final TableField<SmsUserMastRecord, LocalDateTime> UPDATEDATE = createField(DSL.name("updateDate"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "维护时间");

    /**
     * The column <code>sms.sms_user_mast.updateUser</code>. 维护人员
     */
    public final TableField<SmsUserMastRecord, String> UPDATEUSER = createField(DSL.name("updateUser"), SQLDataType.VARCHAR(32).nullable(false), this, "维护人员");

    /**
     * The column <code>sms.sms_user_mast.updateOrg</code>. 维护机构
     */
    public final TableField<SmsUserMastRecord, String> UPDATEORG = createField(DSL.name("updateOrg"), SQLDataType.VARCHAR(32).nullable(false), this, "维护机构");

    /**
     * The column <code>sms.sms_user_mast.updateNo</code>. 维护序号
     */
    public final TableField<SmsUserMastRecord, Integer> UPDATENO = createField(DSL.name("updateNo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "维护序号");

    /**
     * The column <code>sms.sms_user_mast.entityId</code>. 所属实体
     */
    public final TableField<SmsUserMastRecord, String> ENTITYID = createField(DSL.name("entityId"), SQLDataType.VARCHAR(32).nullable(false), this, "所属实体");

    private SmsUserMast(Name alias, Table<SmsUserMastRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmsUserMast(Name alias, Table<SmsUserMastRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("权限-用户主表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sms.sms_user_mast</code> table reference
     */
    public SmsUserMast(String alias) {
        this(DSL.name(alias), SMS_USER_MAST);
    }

    /**
     * Create an aliased <code>sms.sms_user_mast</code> table reference
     */
    public SmsUserMast(Name alias) {
        this(alias, SMS_USER_MAST);
    }

    /**
     * Create a <code>sms.sms_user_mast</code> table reference
     */
    public SmsUserMast() {
        this(DSL.name("sms_user_mast"), null);
    }

    public <O extends Record> SmsUserMast(Table<O> child, ForeignKey<O, SmsUserMastRecord> key) {
        super(child, key, SMS_USER_MAST);
    }

    @Override
    public Schema getSchema() {
        return Sms.SMS;
    }

    @Override
    public UniqueKey<SmsUserMastRecord> getPrimaryKey() {
        return Keys.KEY_SMS_USER_MAST_PRIMARY;
    }

    @Override
    public List<UniqueKey<SmsUserMastRecord>> getKeys() {
        return Arrays.<UniqueKey<SmsUserMastRecord>>asList(Keys.KEY_SMS_USER_MAST_PRIMARY, Keys.KEY_SMS_USER_MAST_IN_SMS_USER_MAST_1);
    }

    @Override
    public SmsUserMast as(String alias) {
        return new SmsUserMast(DSL.name(alias), this);
    }

    @Override
    public SmsUserMast as(Name alias) {
        return new SmsUserMast(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmsUserMast rename(String name) {
        return new SmsUserMast(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmsUserMast rename(Name name) {
        return new SmsUserMast(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, String, Integer, String, String, String, String, String, LocalDateTime, Integer, Boolean, LocalDateTime, String, String, LocalDateTime, String, String, Integer, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
