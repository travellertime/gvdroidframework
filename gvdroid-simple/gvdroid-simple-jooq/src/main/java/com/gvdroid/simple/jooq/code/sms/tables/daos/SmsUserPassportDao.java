/*
 * This file is generated by jOOQ.
 */
package com.gvdroid.simple.jooq.code.sms.tables.daos;


import com.gvdroid.simple.jooq.code.sms.tables.SmsUserPassport;
import com.gvdroid.simple.jooq.code.sms.tables.records.SmsUserPassportRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 权限-用户登陆凭证
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class SmsUserPassportDao extends DAOImpl<SmsUserPassportRecord, com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport, Long> {

    /**
     * Create a new SmsUserPassportDao without any configuration
     */
    public SmsUserPassportDao() {
        super(SmsUserPassport.SMS_USER_PASSPORT, com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport.class);
    }

    /**
     * Create a new SmsUserPassportDao with an attached configuration
     */
    @Autowired
    public SmsUserPassportDao(Configuration configuration) {
        super(SmsUserPassport.SMS_USER_PASSPORT, com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport.class, configuration);
    }

    @Override
    public Long getId(com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchById(Long... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport fetchOneById(Long value) {
        return fetchOne(SmsUserPassport.SMS_USER_PASSPORT.ID, value);
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfUserid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByUserid(Long... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.USERID, values);
    }

    /**
     * Fetch records that have <code>passportType BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfPassporttype(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.PASSPORTTYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passportType IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByPassporttype(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.PASSPORTTYPE, values);
    }

    /**
     * Fetch records that have <code>passportNo BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfPassportno(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.PASSPORTNO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passportNo IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByPassportno(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.PASSPORTNO, values);
    }

    /**
     * Fetch records that have <code>saltCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfSaltcode(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.SALTCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>saltCode IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchBySaltcode(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.SALTCODE, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByPassword(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>lastLoginDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfLastlogindate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.LASTLOGINDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastLoginDate IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByLastlogindate(LocalDateTime... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.LASTLOGINDATE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByStatus(Integer... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.STATUS, values);
    }

    /**
     * Fetch records that have <code>deleted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfDeleted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByDeleted(Boolean... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.DELETED, values);
    }

    /**
     * Fetch records that have <code>createDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfCreatedate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.CREATEDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createDate IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByCreatedate(LocalDateTime... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.CREATEDATE, values);
    }

    /**
     * Fetch records that have <code>createUser BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfCreateuser(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.CREATEUSER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createUser IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByCreateuser(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.CREATEUSER, values);
    }

    /**
     * Fetch records that have <code>createOrg BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfCreateorg(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.CREATEORG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createOrg IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByCreateorg(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.CREATEORG, values);
    }

    /**
     * Fetch records that have <code>updateDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfUpdatedate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.UPDATEDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updateDate IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByUpdatedate(LocalDateTime... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.UPDATEDATE, values);
    }

    /**
     * Fetch records that have <code>updateUser BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfUpdateuser(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.UPDATEUSER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updateUser IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByUpdateuser(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.UPDATEUSER, values);
    }

    /**
     * Fetch records that have <code>updateOrg BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfUpdateorg(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.UPDATEORG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updateOrg IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByUpdateorg(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.UPDATEORG, values);
    }

    /**
     * Fetch records that have <code>updateNo BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfUpdateno(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.UPDATENO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updateNo IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByUpdateno(Integer... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.UPDATENO, values);
    }

    /**
     * Fetch records that have <code>entityId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchRangeOfEntityid(String lowerInclusive, String upperInclusive) {
        return fetchRange(SmsUserPassport.SMS_USER_PASSPORT.ENTITYID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>entityId IN (values)</code>
     */
    public List<com.gvdroid.simple.jooq.code.sms.tables.pojos.SmsUserPassport> fetchByEntityid(String... values) {
        return fetch(SmsUserPassport.SMS_USER_PASSPORT.ENTITYID, values);
    }
}
