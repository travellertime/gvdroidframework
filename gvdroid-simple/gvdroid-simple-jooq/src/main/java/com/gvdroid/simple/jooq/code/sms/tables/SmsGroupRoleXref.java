/*
 * This file is generated by jOOQ.
 */
package com.gvdroid.simple.jooq.code.sms.tables;


import com.gvdroid.simple.jooq.code.sms.Keys;
import com.gvdroid.simple.jooq.code.sms.Sms;
import com.gvdroid.simple.jooq.code.sms.tables.records.SmsGroupRoleXrefRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 权限-用户分组角色关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmsGroupRoleXref extends TableImpl<SmsGroupRoleXrefRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sms.sms_group_role_xref</code>
     */
    public static final SmsGroupRoleXref SMS_GROUP_ROLE_XREF = new SmsGroupRoleXref();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmsGroupRoleXrefRecord> getRecordType() {
        return SmsGroupRoleXrefRecord.class;
    }

    /**
     * The column <code>sms.sms_group_role_xref.id</code>. 主键
     */
    public final TableField<SmsGroupRoleXrefRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>sms.sms_group_role_xref.groupId</code>. 用户组编号
     */
    public final TableField<SmsGroupRoleXrefRecord, Long> GROUPID = createField(DSL.name("groupId"), SQLDataType.BIGINT.nullable(false), this, "用户组编号");

    /**
     * The column <code>sms.sms_group_role_xref.roleId</code>. 角色编号
     */
    public final TableField<SmsGroupRoleXrefRecord, Long> ROLEID = createField(DSL.name("roleId"), SQLDataType.BIGINT.nullable(false), this, "角色编号");

    /**
     * The column <code>sms.sms_group_role_xref.status</code>. 状态 1 normal
     */
    public final TableField<SmsGroupRoleXrefRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "状态 1 normal");

    /**
     * The column <code>sms.sms_group_role_xref.deleted</code>. 删除状态 0 正常 1 逻辑删除
     */
    public final TableField<SmsGroupRoleXrefRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "删除状态 0 正常 1 逻辑删除");

    /**
     * The column <code>sms.sms_group_role_xref.createDate</code>. 创建时间
     */
    public final TableField<SmsGroupRoleXrefRecord, LocalDateTime> CREATEDATE = createField(DSL.name("createDate"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>sms.sms_group_role_xref.createUser</code>. 创建人员
     */
    public final TableField<SmsGroupRoleXrefRecord, String> CREATEUSER = createField(DSL.name("createUser"), SQLDataType.VARCHAR(32).nullable(false), this, "创建人员");

    /**
     * The column <code>sms.sms_group_role_xref.createOrg</code>. 创建机构
     */
    public final TableField<SmsGroupRoleXrefRecord, String> CREATEORG = createField(DSL.name("createOrg"), SQLDataType.VARCHAR(32).nullable(false), this, "创建机构");

    /**
     * The column <code>sms.sms_group_role_xref.updateDate</code>. 维护时间
     */
    public final TableField<SmsGroupRoleXrefRecord, LocalDateTime> UPDATEDATE = createField(DSL.name("updateDate"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "维护时间");

    /**
     * The column <code>sms.sms_group_role_xref.updateUser</code>. 维护人员
     */
    public final TableField<SmsGroupRoleXrefRecord, String> UPDATEUSER = createField(DSL.name("updateUser"), SQLDataType.VARCHAR(32).nullable(false), this, "维护人员");

    /**
     * The column <code>sms.sms_group_role_xref.updateOrg</code>. 维护机构
     */
    public final TableField<SmsGroupRoleXrefRecord, String> UPDATEORG = createField(DSL.name("updateOrg"), SQLDataType.VARCHAR(32).nullable(false), this, "维护机构");

    /**
     * The column <code>sms.sms_group_role_xref.updateNo</code>. 维护序号
     */
    public final TableField<SmsGroupRoleXrefRecord, Integer> UPDATENO = createField(DSL.name("updateNo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "维护序号");

    /**
     * The column <code>sms.sms_group_role_xref.entityId</code>. 所属实体
     */
    public final TableField<SmsGroupRoleXrefRecord, String> ENTITYID = createField(DSL.name("entityId"), SQLDataType.VARCHAR(32).nullable(false), this, "所属实体");

    private SmsGroupRoleXref(Name alias, Table<SmsGroupRoleXrefRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmsGroupRoleXref(Name alias, Table<SmsGroupRoleXrefRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("权限-用户分组角色关联表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sms.sms_group_role_xref</code> table reference
     */
    public SmsGroupRoleXref(String alias) {
        this(DSL.name(alias), SMS_GROUP_ROLE_XREF);
    }

    /**
     * Create an aliased <code>sms.sms_group_role_xref</code> table reference
     */
    public SmsGroupRoleXref(Name alias) {
        this(alias, SMS_GROUP_ROLE_XREF);
    }

    /**
     * Create a <code>sms.sms_group_role_xref</code> table reference
     */
    public SmsGroupRoleXref() {
        this(DSL.name("sms_group_role_xref"), null);
    }

    public <O extends Record> SmsGroupRoleXref(Table<O> child, ForeignKey<O, SmsGroupRoleXrefRecord> key) {
        super(child, key, SMS_GROUP_ROLE_XREF);
    }

    @Override
    public Schema getSchema() {
        return Sms.SMS;
    }

    @Override
    public UniqueKey<SmsGroupRoleXrefRecord> getPrimaryKey() {
        return Keys.KEY_SMS_GROUP_ROLE_XREF_PRIMARY;
    }

    @Override
    public List<UniqueKey<SmsGroupRoleXrefRecord>> getKeys() {
        return Arrays.<UniqueKey<SmsGroupRoleXrefRecord>>asList(Keys.KEY_SMS_GROUP_ROLE_XREF_PRIMARY, Keys.KEY_SMS_GROUP_ROLE_XREF_IN_SMS_GROUP_ROLE_XREF_1);
    }

    @Override
    public SmsGroupRoleXref as(String alias) {
        return new SmsGroupRoleXref(DSL.name(alias), this);
    }

    @Override
    public SmsGroupRoleXref as(Name alias) {
        return new SmsGroupRoleXref(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmsGroupRoleXref rename(String name) {
        return new SmsGroupRoleXref(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmsGroupRoleXref rename(Name name) {
        return new SmsGroupRoleXref(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Long, Integer, Boolean, LocalDateTime, String, String, LocalDateTime, String, String, Integer, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
